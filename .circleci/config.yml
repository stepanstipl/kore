---
version: 2.1

orbs:
  helm: circleci/helm@1.0.0
  kube-orb: circleci/kubernetes@0.11.0
  slack: circleci/slack@3.4.2

parameters:
  enable_e2e:
    type: boolean
    default: false

  enable_gke_e2e:
    type: boolean
    default: false

  enable_eks_e2e:
    type: boolean
    default: false

  enable_aks_e2e:
    type: boolean
    default: false

  enable_update_e2e:
    type: boolean
    default: false

environment: &SERVICES_ENV
  DEBIAN_FRONTEND: "noninteractive"
  KORE_ADMIN_PASS: "password"
  KORE_ADMIN_TOKEN: "password"
  KORE_API_PUBLIC_URL: "http://localhost:10080"
  KORE_API_PUBLIC_URL_E2E: "http://localhost:10080"
  KORE_LOCAL_JWT_PUBLIC_KEY: "MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAIG6XiNhkwDETU2zk0tGlI0DKlbEJcN4jxwJBqhd3neReLDnqg9SBgKepdy9Nxw5LAd1gNoBkLvdFJg9SbHlM0sCAwEAAQ=="
  KORE_UI_PUBLIC_URL: "http://localhost:3000"
  TERM: linux

#
## Jobs
#
jobs:
  build-api:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - run:
          name: Build
          command: |
            make build
      - persist_to_workspace:
          root: bin
          paths:
            - kore
            - kore-apiserver

  check-linting:
    resource_class: large
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - run:
          name: Check Linting
          command: |
            make check

  check-units:
    resource_class: large
    docker:
      - image: circleci/golang:1.14
      - name: database
        image: mariadb:bionic
        environment:
          MYSQL_ROOT_PASSWORD: pass
        command:
          sh -c "
             echo 'CREATE DATABASE IF NOT EXISTS kore;' > /docker-entrypoint-initdb.d/init.sql;
             /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci"
    steps:
      - checkout
      - run:
          name: Running Unit Tests
          environment:
            TEST_USERS_DATABASE_URL: "root:pass@tcp(database:3306)/kore?parseTime=true"
          command: |
            make test

  check-api-deepcopies:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - run:
          name: Checking API Deepcopies
          command: |
            make deepcopy-gen
            make check-api-sync

  check-api-register:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - run:
          name: Checking API Register
          command: |
            make register-gen
            make check-api-sync

  check-api-crds:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - run:
          name: Checking API Schema
          command: |
            make crd-gen
            make schema-gen
            make check-api-sync

  validate-api:
    parameters:
      kubernetes_version:
        type: string
        default: "latest"

    environment:
      <<: *SERVICES_ENV
      KUBE_VERSION: << parameters.kubernetes_version >>
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:202007-01
    steps:
      - checkout
#      - run:
#          name: Checking API changes
#          command: |
#            git diff master... --name-only | egrep '^(pkg|cmd)/' || circleci-agent step halt
      - kube-orb/install-kubectl:
          kubectl-version: latest
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Provisioning Local Cluster
          command: |
            mkdir -p bin
            # copy the cli from build
            cp -f /tmp/workspace/* bin/
            sudo mkdir -p /usr/local/go_workspace
            test/bin/e2e.sh \
              --build-cli false \
              --build-kore-api false \
              --build-proxy false \
              --k8s-version ${KUBE_VERSION} \
              --version ${CIRCLE_SHA1}
      - run:
          name: Kore API Logs
          background: true
          command: |
            make kind-apiserver-logs
      - run:
          name: Checking Swagger
          command: |
            sudo apt-get install jq
            make swagger-json
            make swagger-validate
            make check-swagger-apiclient
      - run:
          name: Checking UI Autogeneration
          working_directory: ~/project/ui
          command: |
            make check-kore-autogen
      - run:
          name: Integration testing API
          command: |
            make run-api-test

  release:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            VERSION=${CIRCLE_TAG:-latest} make images
            VERSION=${CIRCLE_TAG:-latest} make push-images
            # These are used for QA
            VERSION=${CIRCLE_SHA1} make images
            VERSION=${CIRCLE_SHA1} make push-images

  check-release-notes:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - run:
          command: |
            VERSION=${CIRCLE_TAG} make check-release-notes

  publish-release:
    docker:
      - image: circleci/golang:1.14
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - helm/install-helm-client:
          version: v3.1.2
      - deploy:
          command: |
            VERSION=${CIRCLE_TAG} make package
            VERSION=${CIRCLE_TAG} make push-release-packages

  #
  ## UI
  #
  check-ui:
    docker:
      - image: circleci/node:12
    steps:
      - checkout
      - restore_cache:
          keys:
            - ui-node-v1-{{ checksum "ui/package-lock.json" }}
      - run:
          name: Testing UI
          working_directory: ~/project/ui
          command: |
            # Restore node modules only if we've not got a cache hit.
            [[ -d node_modules ]] || make deps
            make test

  validate-ui:
    environment:
      <<: *SERVICES_ENV
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:202007-01
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - ui-node-v1-{{ checksum "ui/package-lock.json" }}
      - kube-orb/install-kubectl:
          kubectl-version: latest
      - run:
          name: Download Containers
          background: true
          command: |
            docker pull kindest/node:v1.15.11
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Provisioning Local Cluster
          background: true
          command: |
            mkdir -p bin
            # copy the cli from build
            cp -f /tmp/workspace/* bin/
            # build the cluster
            test/bin/e2e.sh \
              --build-cli false \
              --build-kore-api false \
              --build-proxy false \
              --enable-ui false \
              --version ${CIRCLE_SHA1}
      - run:
          name: Kore API Logs
          background: true
          command: |
            make kind-apiserver-logs
      - run:
          name: Running Redis Service
          background: true
          command: |
            docker run --net=host -d redis
      - run:
          name: Running kore-ui
          working_directory: ~/project/ui
          background: true
          environment:
            KORE_API_TOKEN: password
            KORE_API_URL: http://localhost:10080/api/v1alpha1
            KORE_BASE_URL: http://localhost:3000
            KORE_UI_DISABLE_ANIMATIONS: 'true'
            REDIS_URL: redis://127.0.0.1:6379
          command: |
            # Restore node modules only if we've not got a cache hit.
            [[ -d node_modules ]] || make deps
            make build
            npm start
      - run:
          name: Install Headless Chrome dependencies
          command: ./ui/scripts/install-e2e-deps.sh
      - run:
          name: Waiting for UI & API
          command: |
            echo "`date +"%T"`: Waiting for API"
            timeout 600 bash -c 'until curl http://127.0.0.1:10080/healthz >/dev/null 2>&1; do sleep 5; done'
            echo "`date +"%T"`: Waiting for UI"
            timeout 600 bash -c 'until curl http://127.0.0.1:3000 >/dev/null 2>&1; do sleep 5; done'
            echo "`date +"%T"`: API and UI ready"
      - save_cache:
          paths:
            - ui/node_modules
          key: ui-node-v1-{{ checksum "ui/package-lock.json" }}
      - run:
          name: End-to-end testing UI
          working_directory: ~/project/ui
          environment:
            NODE_ENV: development
          command: |
            make test-e2e

  release-ui:
    environment:
      KORE_UI_IMAGE: quay.io/appvia/kore-ui
    docker:
      - image: docker:19.03-dind
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - deploy:
          name: Publishing UI to quay.io
          working_directory: ~/project/ui
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
            docker build -t ${KORE_UI_IMAGE}:${CIRCLE_SHA1} --build-arg version=${CIRCLE_TAG:-${CIRCLE_SHA1}} .
            docker tag ${KORE_UI_IMAGE}:${CIRCLE_SHA1} ${KORE_UI_IMAGE}:${CIRCLE_TAG:-latest}
            docker push ${KORE_UI_IMAGE}:${CIRCLE_TAG:-latest}
            docker push ${KORE_UI_IMAGE}:${CIRCLE_SHA1}

  deploy-qa:
    docker:
      - image: alpine/helm:3.1.2
    steps:
      - checkout
      - run:
          name: Installing GNU
          command: |
            apk add bash coreutils curl --update
      - kube-orb/install-kubeconfig:
        kubeconfig: KUBECONFIG_DATA
      - run:
          name: Deploying to QA
          command: |
            export BUILD_ID=${CIRCLE_SHA1}
            export VERSION=${CIRCLE_SHA1}
            echo "Deploying to QA, version: ${VERSION}"
            hack/deploy-qa.sh
      - slack/notify-on-failure:
        only_for_branches: master

  deploy-demo:
    docker:
      - image: alpine/helm:3.1.2
    steps:
      - checkout
      - run:
          name: Installing GNU
          command: |
            apk add bash coreutils curl --update
      - kube-orb/install-kubeconfig:
        kubeconfig: KUBECONFIG_DATA_DEMO
      - run:
          name: Deploying to Demo
          command: |
            export BUILD_ID=${CIRCLE_SHA1}
            export VERSION=${CIRCLE_SHA1}
            echo "Deploying to demo, version: ${VERSION}"
            hack/deploy-demo.sh
      - slack/notify-on-failure:
        only_for_branches: master

  e2e_gke:
    environment:
      <<: *SERVICES_ENV
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - kube-orb/install-kubectl:
          kubectl-version: latest
      - run:
          name: Installing Tools
          command: |
            sudo apt-get update
            sudo apt install -y bats jq awscli
      - run:
          name: Docker Login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Provisioning Local Cluster
          command: |
            mkdir -p bin
            # copy the cli from build
            cp -f /tmp/workspace/* bin/
            # build the cluster
            test/bin/e2e.sh \
              --build-cli false \
              --build-kore-api false \
              --build-proxy false \
              --enable-ui false \
              --version ${CIRCLE_SHA1}
      - run:
          name: Kore API Logs
          background: true
          command: |
            make kind-apiserver-logs
      - run:
          name: Running GKE E2E Suite
          no_output_timeout: 30m
          command: |
            rm -f ${HOME}/.kore/config
            test/e2e/check-suite.sh \
              --enable-e2e-user ${KORE_E2E_USER} \
              --enable-gke true
      - slack/notify-on-failure:
          only_for_branches: master

  e2e_ui_gke:
    environment:
      <<: *SERVICES_ENV
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - kube-orb/install-kubectl:
          kubectl-version: latest
      - run:
          name: Installing Tools
          command: |
            sudo apt-get update
            sudo apt install -y bats jq awscli
      - run:
          name: Docker Login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Provisioning Local Cluster
          command: |
            mkdir -p bin
            # copy the cli from build
            cp -f /tmp/workspace/* bin/
            # build the cluster
            test/bin/e2e.sh \
              --build-cli false \
              --build-kore-api false \
              --build-proxy false \
              --enable-ui true \
              --version ${CIRCLE_SHA1}
      - run:
          name: Kore API Logs
          background: true
          command: |
            make kind-apiserver-logs
      - run:
          name: Setup environment
          no_output_timeout: 30m
          command: |
            rm -f ${HOME}/.kore/config
            test/e2e/create-kore-config.sh
            test/e2e/check-suite.sh \
              --enable-unit-tests false \
              --enable-e2e-user ${KORE_E2E_USER}
            echo -n ${GKE_SA_QA} | base64 -d > ./gke-credentials.yml 2>/dev/null
            bin/kore apply -f ./gke-credentials.yml -t kore-admin 2>&1 >/dev/null
      - run:
          name: Running UI GKE E2E Suite
          no_output_timeout: 30m
          command: |
            cd ui
            npm install jest puppeteer jest-puppeteer
            make test-e2e-nightly-gke
      - slack/notify-on-failure:
          only_for_branches: master

  e2e_eks:
    environment:
      <<: *SERVICES_ENV
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - kube-orb/install-kubectl:
          kubectl-version: latest
      - run:
          name: Installing Tools
          command: |
            sudo apt-get update
            sudo apt install -y bats jq awscli
      - run:
          name: Docker Login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Provisioning Local Cluster
          command: |
            mkdir -p bin
            # copy the cli from build
            cp -f /tmp/workspace/* bin/
            # build the cluster
            test/bin/e2e.sh \
              --build-cli false \
              --build-kore-api false \
              --build-proxy false \
              --enable-ui false \
              --version ${CIRCLE_SHA1}
      - run:
          name: Kore API Logs
          background: true
          command: |
            make kind-apiserver-logs
      - run:
          name: Running EKS E2E Suite
          no_output_timeout: 30m
          command: |
            rm -f ${HOME}/.kore/config
            test/e2e/check-suite.sh \
              --enable-e2e-user ${KORE_E2E_USER} \
              --enable-eks true
      - slack/notify-on-failure:
          only_for_branches: master

  e2e_aks:
    environment:
      <<: *SERVICES_ENV
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - kube-orb/install-kubectl:
          kubectl-version: latest
      - run:
          name: Installing Tools
          command: |
            sudo apt-get update
            sudo apt install -y bats jq awscli
      - run:
          name: Docker Login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Provisioning Local Cluster
          command: |
            mkdir -p bin
            # copy the cli from build
            cp -f /tmp/workspace/* bin/
            # build the cluster
            test/bin/e2e.sh \
              --build-cli false \
              --build-kore-api false \
              --build-proxy false \
              --enable-ui false \
              --version ${CIRCLE_SHA1}
      - run:
          name: Kore API Logs
          background: true
          command: |
            make kind-apiserver-logs
      - run:
          name: Running AKS E2E Suite
          no_output_timeout: 60m
          command: |
            rm -f ${HOME}/.kore/config
            test/e2e/check-suite.sh \
              --enable-e2e-user ${KORE_E2E_USER} \
              --enable-aks true
      - slack/notify-on-failure:
          only_for_branches: master

  update_e2e:
    parameters:
      from:
        type: string
        default: latest
    environment:
      <<: *SERVICES_ENV
      FROM_BUILD: << parameters.from >>

    machine:
      docker_layer_caching: true
      image: ubuntu-1604:202007-01
    steps:
      - checkout
      - kube-orb/install-kubectl:
          kubectl-version: latest
      - run:
          name: Installing Tools
          command: |
            sudo apt-get update
            sudo apt install -y bats jq awscli
      - run:
          name: Docker Login
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} quay.io
      - run:
          name: Building Last Release
          command: |
            BUILD=$(git describe --tags --abbrev=0)
            if [[ "${FROM_BUILD}" != "latest" ]]; then
              BUILD=${FROM_BUILD}
            fi
            git checkout ${BUILD}
            # we don't need to build the images this time
            test/bin/e2e.sh \
              --build-images false \
              --version ${BUILD}
      - run:
          name: Running E2E Suite
          no_output_timeout: 30m
          command: |
            rm -f ${HOME}/.kore/config
            test/e2e/check-suite.sh \
              --enable-e2e-user ${KORE_E2E_USER} \
              --enable-gke true
      - run:
          name: Updating Kore Release
          command: |
            git checkout ${CIRCLE_SHA1}
            test/bin/e2e.sh --version ${CIRCLE_SHA1}
      - run:
          name: Running E2E Suite
          no_output_timeout: 30m
          command: |
            test/e2e/check-suite.sh \
              --enable-e2e-user ${KORE_E2E_USER} \
              --enable-gke true
      - slack/notify-on-failure:
          only_for_branches: master

workflows:
  version: 2.1
  workflow:
    unless: << pipeline.parameters.enable_e2e >>
    jobs:
      - build-api:
          filters:
            tags:
              only: /^v.*$/
      - check-ui:
          filters:
            tags:
              only: /^v.*$/
      - check-units:
          filters:
            tags:
              only: /^v.*$/
      - check-linting:
          filters:
            tags:
              only: /^v.*$/
      - check-api-deepcopies:
          filters:
            tags:
              only: /^v.*$/
      - check-api-register:
          filters:
            tags:
              only: /^v.*$/
      - check-api-crds:
          filters:
            tags:
              only: /^v.*$/
      - validate-ui:
          filters:
            tags:
              only: /^v.*$/
          requires:
            - build-api
      - validate-api:
          filters:
            tags:
              only: /^v.*$/
          requires:
            - build-api
      - release:
          requires:
            - validate-api
            - check-api-crds
            - check-api-deepcopies
            - check-api-register
            - check-linting
            - check-units
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/
      - release-ui:
          filters:
            branches:
              only: master
            tags:
              only: /^v.*$/
          requires:
            - validate-ui
            - check-ui
      - check-release-notes:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)($|-rc([0-9]+))$/
      - e2e_gke:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)($|-rc([0-9]+)|-beta([0-9]+)|-alpha([0-9]+))$/
          requires:
            - build-api
      - e2e_eks:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)($|-rc([0-9]+)|-beta([0-9]+)|-alpha([0-9]+))$/
          requires:
            - build-api
      - e2e_aks:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)($|-rc([0-9]+)|-beta([0-9]+)|-alpha([0-9]+))$/
          requires:
            - build-api
      - publish-release:
          requires:
            - check-release-notes
            - release
            - release-ui
            - e2e_gke
            - e2e_eks
            - e2e_aks
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*$/
      - deploy-qa:
          filters:
            branches:
              only: master
          requires:
            - release
            - release-ui
      - request-deploy-demo:
          type: approval
          requires:
            - release
            - release-ui
      - deploy-demo:
          filters:
            branches:
              only: master
          requires:
            - request-deploy-demo

  e2e_gke:
    when: << pipeline.parameters.enable_gke_e2e >>
    jobs:
      - build-api
      - e2e_gke:
          requires:
            - build-api
      - e2e_ui_gke:
          requires:
            - build-api

  e2e_eks:
    when: << pipeline.parameters.enable_eks_e2e >>
    jobs:
      - build-api
      - e2e_eks:
          requires:
            - build-api

  e2e_aks:
    when: << pipeline.parameters.enable_aks_e2e >>
    jobs:
      - build-api
      - e2e_aks:
          requires:
            - build-api

  update_e2e:
    when: << pipeline.parameters.enable_update_e2e >>
    jobs:
      - update_e2e

  nightly:
    triggers:
      - schedule:
          cron: "0 20 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-api
      - e2e_gke:
          requires:
            - build-api
      - e2e_eks:
          requires:
            - build-api
      - e2e_aks:
          requires:
            - build-api

  weekly:
    triggers:
      - schedule:
          cron: "0 10 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-api
      - validate-api:
          matrix:
            parameters:
              kubernetes_version: [v1.15.11, v1.16.9, v1.17.5, v1.18.6]
          requires:
            - build-api
