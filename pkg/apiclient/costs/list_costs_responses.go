// Code generated by go-swagger; DO NOT EDIT.

package costs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/appvia/kore/pkg/apiclient/models"
)

// ListCostsReader is a Reader for the ListCosts structure.
type ListCostsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListCostsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListCostsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListCostsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListCostsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListCostsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListCostsOK creates a ListCostsOK with default headers values
func NewListCostsOK() *ListCostsOK {
	return &ListCostsOK{}
}

/*ListCostsOK handles this case with default header values.

A list of costs known to the system, filtered by the above parameters
*/
type ListCostsOK struct {
	Payload *models.V1beta1AssetCostList
}

func (o *ListCostsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/costs][%d] listCostsOK  %+v", 200, o.Payload)
}

func (o *ListCostsOK) GetPayload() *models.V1beta1AssetCostList {
	return o.Payload
}

func (o *ListCostsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1beta1AssetCostList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCostsUnauthorized creates a ListCostsUnauthorized with default headers values
func NewListCostsUnauthorized() *ListCostsUnauthorized {
	return &ListCostsUnauthorized{}
}

/*ListCostsUnauthorized handles this case with default header values.

If not authenticated
*/
type ListCostsUnauthorized struct {
}

func (o *ListCostsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/costs][%d] listCostsUnauthorized ", 401)
}

func (o *ListCostsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListCostsForbidden creates a ListCostsForbidden with default headers values
func NewListCostsForbidden() *ListCostsForbidden {
	return &ListCostsForbidden{}
}

/*ListCostsForbidden handles this case with default header values.

If authenticated but not authorized
*/
type ListCostsForbidden struct {
}

func (o *ListCostsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/costs][%d] listCostsForbidden ", 403)
}

func (o *ListCostsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListCostsInternalServerError creates a ListCostsInternalServerError with default headers values
func NewListCostsInternalServerError() *ListCostsInternalServerError {
	return &ListCostsInternalServerError{}
}

/*ListCostsInternalServerError handles this case with default header values.

A generic API error containing the cause of the error
*/
type ListCostsInternalServerError struct {
	Payload *models.ApiserverError
}

func (o *ListCostsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1alpha1/costs][%d] listCostsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListCostsInternalServerError) GetPayload() *models.ApiserverError {
	return o.Payload
}

func (o *ListCostsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ApiserverError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
